{"ast":null,"code":"var _jsxFileName = \"/Users/cindychen/Documents/NEU/Course_Material/cs5610_react_apps/calculator-redux/src/components/counterShower.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CounterShower(props) {\n  _s();\n\n  const total = useSelector(state => state.calculate.total);\n  const history = useSelector(state => state.calculate.history);\n  const historyResults = history.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 50\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"History Results: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: historyResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Result: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n} // class CounterShower extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.props.total}</h1>\n//       </div>\n//     );\n//   }\n// }\n// // useDispatch\n// let mapDispatchToProps = function (dispatch, props) {\n//   return {};\n// };\n// // this guy isn't used here, but it's needed as the first argument in connect\n// // I guess you could also pass undefined...\n// // useSelector\n// function mapStateToProps(state, props) {\n//   return {\n//     total: state.sum,\n//   };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(CounterShower);\n\n_s(CounterShower, \"TWYJuspOrqgtiya4svu25UyNp8M=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = CounterShower;\n\nvar _c;\n\n$RefreshReg$(_c, \"CounterShower\");","map":{"version":3,"sources":["/Users/cindychen/Documents/NEU/Course_Material/cs5610_react_apps/calculator-redux/src/components/counterShower.jsx"],"names":["React","useSelector","CounterShower","props","total","state","calculate","history","historyResults","map","result"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AAIA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC3C,QAAMC,KAAK,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBF,KAA1B,CAAzB;AACA,QAAMG,OAAO,GAAGN,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,OAA1B,CAA3B;AACA,QAAMC,cAAc,GAAGD,OAAO,CAACE,GAAR,CAAaC,MAAD,iBAAY;AAAA,cAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,UAAxB,CAAvB;AAEA,sBACI;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,gBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,C,CAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;GA7CwBF,a;UACRD,W,EACEA,W;;;KAFMC,a","sourcesContent":["import React from \"react\";\nimport {useSelector} from 'react-redux';\n\n\n\nexport default function CounterShower(props) {\n  const total = useSelector(state => state.calculate.total);\n  const history = useSelector(state => state.calculate.history);\n  const historyResults = history.map((result) => <li>{result}</li>);\n\n  return (\n      <div>\n        <h1>History Results: </h1>\n        <ul>{historyResults}</ul>\n        <h1>Current Result: </h1>\n        <h1>{total}</h1>\n      </div>\n  )\n\n}\n\n\n\n\n// class CounterShower extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>{this.props.total}</h1>\n//       </div>\n//     );\n//   }\n// }\n\n\n// // useDispatch\n// let mapDispatchToProps = function (dispatch, props) {\n//   return {};\n// };\n// // this guy isn't used here, but it's needed as the first argument in connect\n// // I guess you could also pass undefined...\n\n\n// // useSelector\n// function mapStateToProps(state, props) {\n//   return {\n//     total: state.sum,\n//   };\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(CounterShower);\n\n\n"]},"metadata":{},"sourceType":"module"}